using Assets.Metater;
using KBCore.Refs;
using MetaVoiceChat;
using MetaVoiceChat.Input.Mic;
using MetaVoiceChat.Utils;
using R3;
using UnityEngine;

public class PlayerVoiceChat : MetaNbl<PlayerVoiceChat>
{
    [SerializeField, Child] private VcMicAudioInput audioInput;
    [SerializeField, Child] private MetaVc vc;
    [SerializeField, Child] private PushToTalkVcInputFilter inputFilter;

    private MuteAndDeafen MuteAndDeafen => MetaCache.Object<MuteAndDeafen>();

    private MicrophoneDevicesListener devicesListener;

    private bool areSettingsInitialized = false;

    private void Update()
    {
        if (!isLocalPlayer)
        {
            return;
        }

        if (!areSettingsInitialized && SettingsUi.HasInstance && audioInput.IsInitialized)
        {
            areSettingsInitialized = true;
            SubscribeToSettings();
        }

        devicesListener?.Poll();

        vc.isInputMuted.Value = !MuteAndDeafen.IsInputEnabled;
        vc.isDeafened.Value = !MuteAndDeafen.IsOutputEnabled;

        if (SettingsUi.HasInstance)
        {
            inputFilter.Gain = SettingsUi.Instance.voiceChatInputVolume.Value;
            vc.isEchoEnabled = SettingsUi.Instance.voiceChatEchoTest.Value;
        }
        else
        {
            inputFilter.Gain = 1f;
            vc.isEchoEnabled = false;
        }
    }

    public override void OnStartLocalPlayer()
    {
        audioInput.OnActiveDeviceChanged += OnActiveDeviceChanged;
        OnActiveDeviceChanged(audioInput.ActiveDevice);

        devicesListener = new MicrophoneDevicesListener(OnDevicesChanged);
    }

    public override void OnStopLocalPlayer()
    {
        audioInput.OnActiveDeviceChanged -= OnActiveDeviceChanged;
    }

    private void SubscribeToSettings()
    {
        if (SettingsUi.HasInstance)
        {
            SettingsUi.Instance.voiceChatInputDeviceSetting.selectedDevice.Subscribe(selectedDevice =>
            {
                if (selectedDevice == null)
                {
                    return;
                }

                audioInput.SetSelectedDevice(selectedDevice);
            }).AddTo(this);
        }
    }

    private void OnActiveDeviceChanged(string device)
    {
        if (SettingsUi.HasInstance)
        {
            SettingsUi.Instance.voiceChatInputDeviceSetting.Delta(Microphone.devices, device);
        }
    }

    private void OnDevicesChanged()
    {
        if (SettingsUi.HasInstance)
        {
            SettingsUi.Instance.voiceChatInputDeviceSetting.Delta(Microphone.devices, audioInput.ActiveDevice);
        }
    }
}
