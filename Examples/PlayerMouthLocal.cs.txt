using MetaVoiceChat.Input;
using UnityEngine;

public class PlayerMouthLocal : VcInputFilter
{
    [Header("Variables")]
    public float minScale = 0.075f;
    public float maxScale = 0.25f;
    public float minTranslationY = 0f;
    public float maxTranslationY = 0.14f;

    [Header("Transforms")]
    public Transform mouthScaleTransform;
    public Transform mouthTranslationTransform;

    protected override void Filter(int index, ref float[] samples)
    {
        //float rms = GetRms(samples);
        //float volume = Mathf.Log10(Mathf.Clamp(rms, 0.0001f, 1f)) * 20f; // Convert RMS to dB scale
        //float t = Mathf.InverseLerp(-80f, 0f, volume); // Assuming -80 dB is the minimum and 0 dB is the maximum volume

        float t = GetRms(samples);

        Vector3 localScale = mouthScaleTransform.localScale;
        localScale.y = Mathf.LerpUnclamped(minScale, maxScale, t);
        mouthScaleTransform.localScale = localScale;

        Vector3 localPosition = mouthTranslationTransform.localPosition;
        localPosition.y = Mathf.LerpUnclamped(minTranslationY, maxTranslationY, t);
        mouthTranslationTransform.localPosition = localPosition;

        //if (samples != null)
        //{
        //    for (int i = 0; i < samples.Length; i++)
        //    {
        //        samples[i] = 0;
        //    }
        //}
    }

    private float GetRms(float[] samples)
    {
        if (samples == null || samples.Length == 0)
        {
            return 0f;
        }

        // calculate RMS (Root Mean Square) of the samples
        float sum = 0f;
        for (int i = 0; i < samples.Length; i++)
        {
            sum += samples[i] * samples[i];
        }

        float rms = Mathf.Sqrt(sum / samples.Length);
        return rms;
    }
}
