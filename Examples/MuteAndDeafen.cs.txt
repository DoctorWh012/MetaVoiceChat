using Assets.Metater;
using R3;
using UnityEngine;
using UnityEngine.UI;

public class MuteAndDeafen : MetaMbs<MuteAndDeafen>
{
    [Header("State")]
    public SerializableReactiveProperty<MuteAndDeafenState> state = new(MuteAndDeafenState.None);
    public SerializableReactiveProperty<bool> isMicMissing = new(false);

    [Header("Colors")]
    public Color activeColor;
    public Color inactiveColor;
    public Color missingColor;

    [Header("References")]
    public Button muteButton;
    public Image muteImage;
    public Button deafenButton;
    public Image deafenImage;

    [Header("Sprites")]
    public Sprite headphonesSprite;
    public Sprite headphonesOffSprite;
    public Sprite microphoneSprite;
    public Sprite microphoneOffSprite;
    public Sprite microphoneQuestionSprite;

    public bool IsInputEnabled => state.Value == MuteAndDeafenState.None && !isMicMissing.Value;
    public bool IsOutputEnabled => state.Value != MuteAndDeafenState.Deafened;

    private void Awake()
    {
        state.Subscribe(_ => Apply()).AddTo(this);
        isMicMissing.Subscribe(_ => Apply()).AddTo(this);

        muteButton.onClick.AddListener(OnMuteButtonClicked);
        deafenButton.onClick.AddListener(OnDeafenButtonClicked);
    }

    private void Update()
    {
        isMicMissing.Value = Microphone.devices.Length == 0;
    }

    private void OnMuteButtonClicked()
    {
        if (state.Value == MuteAndDeafenState.Muted || state.Value == MuteAndDeafenState.Deafened)
        {
            state.Value = MuteAndDeafenState.None;
        }
        else
        {
            state.Value = MuteAndDeafenState.Muted;
        }

        AudioSystem.Instance.PlayClickSfx();
    }

    private void OnDeafenButtonClicked()
    {
        if (state.Value == MuteAndDeafenState.Deafened)
        {
            state.Value = MuteAndDeafenState.None;
        }
        else
        {
            state.Value = MuteAndDeafenState.Deafened;
        }

        AudioSystem.Instance.PlayClickSfx();
    }

    private void Apply()
    {
        muteButton.interactable = !isMicMissing.Value;

        switch (state.Value)
        {
            case MuteAndDeafenState.Muted:
                muteImage.sprite = microphoneOffSprite;
                muteImage.color = inactiveColor;
                deafenImage.sprite = headphonesSprite;
                deafenImage.color = activeColor;
                break;
            case MuteAndDeafenState.Deafened:
                muteImage.sprite = microphoneOffSprite;
                muteImage.color = inactiveColor;
                deafenImage.sprite = headphonesOffSprite;
                deafenImage.color = inactiveColor;
                break;
            case MuteAndDeafenState.None:
                muteImage.sprite = microphoneSprite;
                muteImage.color = activeColor;
                deafenImage.sprite = headphonesSprite;
                deafenImage.color = activeColor;
                break;
        }

        if (isMicMissing.Value)
        {
            muteImage.sprite = microphoneQuestionSprite;
            muteImage.color = missingColor;
        }
    }
}

public enum MuteAndDeafenState
{
    None,
    Muted,
    Deafened
}
