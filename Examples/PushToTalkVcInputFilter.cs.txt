using System;
using Assets.Metater;
using MetaVoiceChat.Input;
using UnityEngine;

public class PushToTalkVcInputFilter : VcInputFilter
{
    private const int FrameDivisor = 16;

    public float debounceSeconds = 0.2f;
    public bool isPressed = false;

    public float? CurrentDecibelLevel { get; private set; } = null;
    public float Gain { get; set; } = 1f;

    private MetaInstant lastActivityInstant;

    protected override void Filter(int index, ref float[] samples)
    {
        float maxRms = GetMaxRms(samples);

        // range: -80 to 0
        float decibelLevel = Mathf.Log10(Mathf.Max(0.0001f, maxRms)) * 20;

        bool isPttEnabled = MetaCache.Object<SettingsUi>().voiceChatIsPushToTalkEnabled.Value;
        if (isPttEnabled)
        {
            if (isPressed)
            {
                lastActivityInstant = MetaInstant.Time;
            }
        }
        else
        {
            if (InputSensitivityUi.HasInstance)
            {
                InputSensitivityUi.Instance.activity.Value = decibelLevel;
            }

            float inputSensitivity = SettingsUi.Instance.voiceChatInputSensitivity.Value;
            if (decibelLevel >= inputSensitivity)
            {
                lastActivityInstant = MetaInstant.Time;
            }
        }

        if (lastActivityInstant.IsInsideCooldown(debounceSeconds))
        {
            for (int i = 0; i < samples.Length; i++)
            {
                samples[i] *= Gain;
            }

            CurrentDecibelLevel = decibelLevel;
        }
        else
        {
            samples = null;

            CurrentDecibelLevel = null;
        }
    }

    private float GetRms(ReadOnlySpan<float> samples)
    {
        if (samples == null || samples.Length == 0)
        {
            return 0f;
        }

        float sum = 0f;
        foreach (var sample in samples)
        {
            sum += sample * sample;
        }

        float rms = Mathf.Sqrt(sum / samples.Length);
        return rms;
    }

    private float GetMaxRms(float[] samples)
    {
        if (samples == null || samples.Length == 0)
        {
            return 0f;
        }

        // this assumes samples.Length % FrameDivisor == 0
        float maxRms = 0f;
        for (int i = 0; i < samples.Length; i += FrameDivisor)
        {
            float rms = GetRms(samples.AsSpan(i, FrameDivisor));
            maxRms = Mathf.Max(maxRms, rms);
        }

        return maxRms;
    }
}
