using System;
using Assets.Metater;
using Mirror;
using R3;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.InputSystem;
using UnityEngine.Serialization;
using UnityEngine.UI;

public class SettingsUi : MetaMbs<SettingsUi>
{
    [Header("Tabs")]
    public GameObject generalTab;
    public Button generalTabButton;
    public GameObject voiceChatTab;
    public Button voiceChatTabButton;
    public GameObject playersTab;
    public Button playersTabButton;
    public GameObject bansTab;
    public Button bansTabButton;

    [Header("Master Volume")]
    public SliderSetting masterVolumeSetting;
    public string masterVolumeParameter;

    [Header("General SFX Volume")]
    public SliderSetting generalSfxVolumeSetting;
    public string generalSfxVolumeParameter;

    [Header("Player SFX Volume")]
    public SliderSetting playerSfxVolumeSetting;
    public string playerSfxVolumeParameter;

    [Header("Music Volume")]
    public SliderSetting musicVolumeSetting;
    public string musicVolumeParameter;

    [Header("Settings")]
    public SliderSetting mouseSensitivitySetting;

    [Header("Voice Chat")]
    public InputDeviceSetting voiceChatInputDeviceSetting;
    public SliderSetting voiceChatInputVolumeSetting;
    public SliderSetting voiceChatOutputVolumeSetting;
    public string voiceChatOutputVolumeParameter;
    [FormerlySerializedAs("voiceChatModeDropdown")]
    public DropdownSetting voiceChatModeSetting;
    public SliderSetting voiceChatInputSensitivitySetting;
    public DropdownSetting voiceChatEchoTestSetting;

    [Header("References")]
    public GameObject contentsGo;
    public GameObject crosshairsGo;
    public AudioMixer mixer;

    private NetworkManagerHUD networkManagerHud;
    private NetworkStatistics networkStatistics;

    public SerializableReactiveProperty<bool> isOpen = new(false);

    public readonly ReactiveProperty<float> mouseSensitivity = new(1f);
    public readonly ReactiveProperty<float> voiceChatInputVolume = new(1f);
    public readonly ReactiveProperty<bool> voiceChatIsPushToTalkEnabled = new(false);
    public readonly ReactiveProperty<float> voiceChatInputSensitivity = new(-50f); // dB
    public readonly ReactiveProperty<bool> voiceChatEchoTest = new(false);

    private void Awake()
    {
        networkManagerHud = MetaCache.Object<NetworkManagerHUD>();
        networkStatistics = MetaCache.Object<NetworkStatistics>();

        isOpen.Subscribe(isOpen =>
        {
            if (isOpen)
            {
                contentsGo.SetActive(true);
                crosshairsGo.SetActive(false);

                networkManagerHud.enabled = true;
                networkStatistics.enabled = true;

                Cursor.lockState = CursorLockMode.None;
                Cursor.visible = true;

                //if (firstSelectedButton != null)
                //{
                //    EventSystem.current.SetSelectedGameObject(firstSelectedButton);
                //}
            }
            else
            {
                contentsGo.SetActive(false);
                crosshairsGo.SetActive(true);

                networkManagerHud.enabled = false;
                networkStatistics.enabled = false;

                Cursor.lockState = CursorLockMode.Locked;
                Cursor.visible = false;

                EventSystem.current.SetSelectedGameObject(null);
            }
        }).AddTo(this);

        CancelInvoke(nameof(Save));
        InvokeRepeating(nameof(Save), 0f, 10f);

        Init();

        ShowGeneralTab();
    }

    private void Update()
    {
        if (Keyboard.current.escapeKey.wasPressedThisFrame)
        {
            isOpen.Value = !isOpen.Value;
        }

        if (!NetworkClient.isConnected && !NetworkServer.active)
        {
            isOpen.Value = false;

            networkManagerHud.enabled = true;
            networkStatistics.enabled = true;

            Cursor.lockState = CursorLockMode.None;
            Cursor.visible = true;
        }

        if (isOpen.Value)
        {
            if (PlayerNet.HasLocalPlayerInstance)
            {
                PlayerNet.LocalPlayerInstance.GetComponent<PlayerBlocker>().InputBlockers.Add(this);
            }
        }
        else
        {
            if (PlayerNet.HasLocalPlayerInstance)
            {
                PlayerNet.LocalPlayerInstance.GetComponent<PlayerBlocker>().InputBlockers.Remove(this);
            }
        }
    }

    private void Save() => PlayerPrefs.Save();

    private void Init()
    {
        var initableSettings = GetComponentsInChildren<IInitableSetting>(true);
        foreach (var setting in initableSettings)
        {
            setting.Init();
        }

        masterVolumeSetting.value.Subscribe(v =>
        {
            MetaAudio.SetMixerGroupVolumeParameter(mixer, masterVolumeParameter, v / 100f, 2f);
        }).AddTo(this);

        generalSfxVolumeSetting.value.Subscribe(v =>
        {
            MetaAudio.SetMixerGroupVolumeParameter(mixer, generalSfxVolumeParameter, v / 100f, 2f);
        }).AddTo(this);

        playerSfxVolumeSetting.value.Subscribe(v =>
        {
            MetaAudio.SetMixerGroupVolumeParameter(mixer, playerSfxVolumeParameter, v / 100f, 2f);
        }).AddTo(this);

        musicVolumeSetting.value.Subscribe(v =>
        {
            MetaAudio.SetMixerGroupVolumeParameter(mixer, musicVolumeParameter, v / 100f, 2f);
        }).AddTo(this);

        mouseSensitivitySetting.value.Subscribe(v =>
        {
            mouseSensitivity.Value = v / 100f;
        }).AddTo(this);

        voiceChatInputVolumeSetting.value.Subscribe(v =>
        {
            voiceChatInputVolume.Value = v / 100f;
        }).AddTo(this);

        voiceChatOutputVolumeSetting.value.Subscribe(v =>
        {
            MetaAudio.SetMixerGroupVolumeParameter(mixer, voiceChatOutputVolumeParameter, v / 100f, 2f);
        }).AddTo(this);

        voiceChatModeSetting.value.Subscribe(v =>
        {
            if (v == "Push-To-Talk")
            {
                voiceChatIsPushToTalkEnabled.Value = true;
                voiceChatInputSensitivitySetting.gameObject.SetActive(false);
            }
            else
            {
                voiceChatIsPushToTalkEnabled.Value = false;
                voiceChatInputSensitivitySetting.gameObject.SetActive(true);
            }
        }).AddTo(this);

        voiceChatInputSensitivitySetting.value.Subscribe(v =>
        {
            voiceChatInputSensitivity.Value = v; // dB
        }).AddTo(this);

        voiceChatEchoTestSetting.value.Subscribe(v =>
        {
            if (v == "On")
            {
                voiceChatEchoTest.Value = true;
            }
            else
            {
                voiceChatEchoTest.Value = false;
            }
        }).AddTo(this);
    }

    public void ShowGeneralTab() => ShowTab(SettingsUiTab.General);
    public void ShowVoiceChatTab() => ShowTab(SettingsUiTab.VoiceChat);
    public void ShowPlayersTab() => ShowTab(SettingsUiTab.Players);
    public void ShowBansTab() => ShowTab(SettingsUiTab.Bans);

    private void ShowTab(SettingsUiTab tab)
    {
        generalTab.SetActive(tab == SettingsUiTab.General);
        generalTabButton.interactable = tab != SettingsUiTab.General;
        voiceChatTab.SetActive(tab == SettingsUiTab.VoiceChat);
        voiceChatTabButton.interactable = tab != SettingsUiTab.VoiceChat;
        playersTab.SetActive(tab == SettingsUiTab.Players);
        playersTabButton.interactable = tab != SettingsUiTab.Players;
        bansTab.SetActive(tab == SettingsUiTab.Bans);
        bansTabButton.interactable = tab != SettingsUiTab.Bans;
    }

    public void PlayClickSfx() => AudioSystem.Instance.PlayClickSfx();

    public void Disconnect()
    {
        if (NetworkServer.active && NetworkClient.isConnected)
        {
            NetworkManager.singleton.StopHost();
        }
        else if (NetworkClient.isConnected)
        {
            NetworkManager.singleton.StopClient();
        }
        else if (NetworkServer.active)
        {
            NetworkManager.singleton.StopServer();
        }

        PlayClickSfx();
    }

    public void Quit()
    {
        Application.Quit();

        PlayClickSfx();
    }
}

[Serializable]
public enum SettingsUiTab
{
    General,
    VoiceChat,
    Players,
    Bans
}