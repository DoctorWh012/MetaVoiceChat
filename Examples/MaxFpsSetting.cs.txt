using System.Collections.Generic;
using Assets.Metater;
using R3;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class MaxFpsSetting : MetaMb<MaxFpsSetting>, IInitableSetting
{
    private const int DefaultValue = -1;
    private const int MinValue = -2;
    private const int MaxValue = 16;

    public SerializableReactiveProperty<int> value = new(DefaultValue);

    [Header("UI")]
    public TMP_Text text;
    public Slider slider;
    public Button resetButton;

    private string PlayerPrefsKey => name;

    private bool isInit = false;

    private static readonly Dictionary<int, int> indexToFps = new()
    {
        {-2,  -2},
        {-1, -1},
        {0, 10},
        {1, 24},
        {2, 30},
        {3, 50},
        {4, 60},
        {5, 75},
        {6, 85},
        {7, 100},
        {8, 120},
        {9, 144},
        {10, 180},
        {11, 200},
        {12, 240},
        {13, 300},
        {14, 360},
        {15, 500},
        {16, 1000}
    };

    //private static readonly Dictionary<int, int> fpsToIndex = indexToFps.ToDictionary((i) => i.Value, (i) => i.Key);

    private void Awake()
    {
        slider.onValueChanged.AddListener(OnSliderValueChanged);
        resetButton.onClick.AddListener(OnResetButtonClicked);

        Init();
    }

    private void OnSliderValueChanged(float v)
    {
        value.Value = Mathf.RoundToInt(v);
    }

    private void OnResetButtonClicked()
    {
        value.Value = DefaultValue;

        AudioSystem.Instance.PlayClickSfx();
    }

    private string GetText(int value)
    {
        return $"{PlayerPrefsKey}: {FormatValue(value)}";
    }

    private static string FormatValue(int value)
    {
        if (value == -2)
        {
            return "V-Sync (Aids Screen Tearing)";
        }

        if (value == -1)
        {
            return "∞";
        }

        return value.ToString();
    }

    public void Init()
    {
        if (isInit)
        {
            return;
        }

        isInit = true;

        slider.minValue = MinValue;
        slider.maxValue = MaxValue;

        value.Value = PlayerPrefs.GetInt(PlayerPrefsKey, DefaultValue);

        value.Subscribe(v =>
        {
            slider.SetValueWithoutNotify(v);
            text.text = GetText(indexToFps[v]);
            PlayerPrefs.SetInt(PlayerPrefsKey, v);

            Apply(indexToFps[v]);
        }).AddTo(this);
    }

    private void Apply(int fps)
    {
        if (fps == -2)
        {
            QualitySettings.vSyncCount = 1;
            Application.targetFrameRate = -1;
        }
        else
        {
            QualitySettings.vSyncCount = 0;
            Application.targetFrameRate = fps;
        }
    }
}
