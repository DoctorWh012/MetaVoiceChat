using Assets.Metater;
using R3;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class DropdownSetting : MetaMb<DropdownSetting>, IInitableSetting
{
    [Header("General")]
    public SerializableReactiveProperty<string> value = new("");
    public bool isSavingDisabled = false;

    [Header("UI")]
    public TMP_Text text;
    public TMP_Dropdown dropdown;
    public Button resetButton;

    private string PlayerPrefsKey => name;

    private bool isInit = false;

    private void Awake()
    {
        dropdown.onValueChanged.AddListener(OnDropdownValueChanged);
        resetButton.onClick.AddListener(OnResetButtonClicked);

        Init();
    }

    protected override void OnDisable()
    {
        base.OnDisable();

        if (isSavingDisabled)
        {
            value.Value = dropdown.options[0].text;
        }
    }

    private void OnDropdownValueChanged(int i)
    {
        value.Value = dropdown.options[i].text;

        AudioSystem.Instance.PlayClickSfx();
    }

    private void OnResetButtonClicked()
    {
        if (dropdown.options.Count == 0)
        {
            value.Value = "";
        }
        else
        {
            value.Value = dropdown.options[0].text;
        }

        AudioSystem.Instance.PlayClickSfx();
    }

    private string GetText(string value)
    {
        return $"{PlayerPrefsKey}: {value}";
    }

    public void Init()
    {
        if (isInit)
        {
            return;
        }

        isInit = true;

        if (!isSavingDisabled)
        {
            value.Value = PlayerPrefs.GetString(PlayerPrefsKey, dropdown.options[0].text);
        }

        value.Subscribe(v =>
        {
            int index = 0;
            for (int i = 0; i < dropdown.options.Count; i++)
            {
                if (dropdown.options[i].text == v)
                {
                    index = i;
                    break;
                }
            }

            dropdown.SetValueWithoutNotify(index);
            text.text = GetText(v);

            if (!isSavingDisabled)
            {
                PlayerPrefs.SetString(PlayerPrefsKey, v);
            }
        }).AddTo(this);
    }
}
